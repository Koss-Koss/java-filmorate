CREATE TABLE IF NOT EXISTS MPA (
    id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name varchar(5) NOT NULL
);

CREATE TABLE IF NOT EXISTS genres (
    id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name varchar(40) NOT NULL
);

CREATE TABLE IF NOT EXISTS films (
    id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name varchar NOT NULL,
    description varchar(200),
    release_date date,
    duration integer,
    rate integer,
    mpa_id INTEGER REFERENCES MPA (id),
    CONSTRAINT constr_film CHECK (name <> '' AND duration > 0),
    CONSTRAINT constr_release_date CHECK (release_date > '1895-12-27')
);

CREATE TABLE IF NOT EXISTS film_genres (
    film_id INTEGER REFERENCES films (id),
    genre_id INTEGER REFERENCES genres (id),
    PRIMARY KEY (film_id, genre_id)
);

CREATE TABLE IF NOT EXISTS users (
    id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    email varchar NOT NULL,
    login varchar NOT NULL,
    name varchar,
    birthday date,
    CONSTRAINT constr_user CHECK (email LIKE '%@%' AND login NOT LIKE '% %' AND birthday <= CURRENT_TIMESTAMP())
);

CREATE TABLE IF NOT EXISTS likes (
    film_id INTEGER REFERENCES films (id),
    user_id INTEGER REFERENCES users (id),
    PRIMARY KEY (film_id, user_id)
);

CREATE TABLE IF NOT EXISTS friendship_statuses (
    id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name varchar(40) NOT NULL
);

CREATE TABLE IF NOT EXISTS friends (
    user_id INTEGER REFERENCES users (id),
    friend_id INTEGER REFERENCES users (id),
    friendship_status_id INTEGER REFERENCES friendship_statuses (id),
    CONSTRAINT constr_friends CHECK (user_id <> friend_id),
    PRIMARY KEY (user_id, friend_id)
    );
